@startuml
title NovaBook Library Management System - Class Diagram

' Entity Classes (Model Layer)
package "Entity Classes" #LightBlue {
  class Book {
    - id: int
    - titulo: String
    - autor: String
    - isbn: String
    - anioPublicacion: int
    - disponible: boolean
    - fechaAlta: LocalDateTime
    --
    + getId(): int
    + setId(id: int): void
    + getTitulo(): String
    + setTitulo(titulo: String): void
    + getAutor(): String
    + setAutor(autor: String): void
    + getIsbn(): String
    + setIsbn(isbn: String): void
    + getAnioPublicacion(): int
    + setAnioPublicacion(anio: int): void
    + isDisponible(): boolean
    + setDisponible(disponible: boolean): void
    + getFechaAlta(): LocalDateTime
    + setFechaAlta(fecha: LocalDateTime): void
  }
  
  class Partner {
    - id: int
    - nombre: String
    - email: String
    - telefono: String
    - direccion: String
    - activo: boolean
    - fechaRegistro: LocalDateTime
    --
    + getId(): int
    + setId(id: int): void
    + getNombre(): String
    + setNombre(nombre: String): void
    + getEmail(): String
    + setEmail(email: String): void
    + getTelefono(): String
    + setTelefono(telefono: String): void
    + getDireccion(): String
    + setDireccion(direccion: String): void
    + isActivo(): boolean
    + setActivo(activo: boolean): void
    + getFechaRegistro(): LocalDateTime
    + setFechaRegistro(fecha: LocalDateTime): void
  }
  
  class Users {
    - id: int
    - nombre: String
    - email: String
    - password: String
    - activo: boolean
    - fechaCreacion: LocalDateTime
    - roles: List<Rol>
    --
    + getId(): int
    + setId(id: int): void
    + getNombre(): String
    + setNombre(nombre: String): void
    + getEmail(): String
    + setEmail(email: String): void
    + getPassword(): String
    + setPassword(password: String): void
    + isActivo(): boolean
    + setActivo(activo: boolean): void
    + getFechaCreacion(): LocalDateTime
    + setFechaCreacion(fecha: LocalDateTime): void
    + getRoles(): List<Rol>
    + setRoles(roles: List<Rol>): void
  }
  
  class Rol {
    - id: int
    - nombre: String
    - descripcion: String
    --
    + getId(): int
    + setId(id: int): void
    + getNombre(): String
    + setNombre(nombre: String): void
    + getDescripcion(): String
    + setDescripcion(descripcion: String): void
  }
  
  class Loan {
    - id: int
    - libro: Book
    - socio: Partner
    - fechaPrestamo: LocalDate
    - fechaDevolucion: LocalDate
    - devuelto: boolean
    --
    + getId(): int
    + setId(id: int): void
    + getLibro(): Book
    + setLibro(libro: Book): void
    + getSocio(): Partner
    + setSocio(socio: Partner): void
    + getFechaPrestamo(): LocalDate
    + setFechaPrestamo(fecha: LocalDate): void
    + getFechaDevolucion(): LocalDate
    + setFechaDevolucion(fecha: LocalDate): void
    + isDevuelto(): boolean
    + setDevuelto(devuelto: boolean): void
  }
}

' DAO Classes (Data Access Layer)
package "Data Access Objects" #LightGreen {
  class BookDAO {
    - connection: ConnectionDB
    --
    + agregar(book: Book): void
    + actualizar(book: Book): void
    + eliminar(id: int): void
    + listar(): List<Book>
    + buscarPorId(id: int): Book
    + buscarPorTitulo(titulo: String): List<Book>
  }
  
  class PartnerDAO {
    - connection: ConnectionDB
    --
    + agregar(partner: Partner): void
    + actualizar(partner: Partner): void
    + eliminar(id: int): void
    + listar(): List<Partner>
    + buscarPorId(id: int): Partner
    + buscarPorEmail(email: String): Partner
  }
  
  class UserDAO {
    - connection: ConnectionDB
    --
    + agregar(user: Users): void
    + actualizar(user: Users): void
    + eliminar(id: int): void
    + listar(): List<Users>
    + buscarPorId(id: int): Users
    + authenticate(email: String, password: String): Users
  }
  
  class LoanDAO {
    - connection: ConnectionDB
    --
    + agregar(loan: Loan): void
    + marcarComoDevuelto(id: int): void
    + listar(): List<Loan>
    + listarActivos(): List<Loan>
    + listarVencidos(): List<Loan>
    + buscarPorId(id: int): Loan
  }
  
  class RolDAO {
    - connection: ConnectionDB
    --
    + agregar(rol: Rol): void
    + actualizar(rol: Rol): void
    + eliminar(id: int): void
    + listar(): List<Rol>
    + buscarPorId(id: int): Rol
  }
}

' Connection Class
package "Database Connection" #LightYellow {
  class ConnectionDB {
    - {static} instance: ConnectionDB
    - connection: Connection
    --
    + {static} getInstance(): ConnectionDB
    + getConnection(): Connection
    + closeConnection(): void
    + testConnection(): boolean
  }
}

' Controller Classes
package "Controllers" #LightPink {
  class MainController {
    - primaryStage: Stage
    - userRole: String
    --
    + navigateToBooksView(): void
    + navigateToLoansView(): void
    + navigateToUsersView(): void
    + navigateToReportsView(): void
    + getCurrentUser(): String
    + getCurrentUserRole(): String
  }
  
  class LoginController {
    - primaryStage: Stage
    - {static} currentUser: UserInfo
    --
    + login(email: String, password: String): String
    + logout(): void
    + canAccessUserManagement(role: String): boolean
    + {static} getCurrentUserName(): String
    + {static} getCurrentUserRole(): String
  }
}

' View Classes (Presentation Layer)
package "View Classes" #LightCyan {
  class LoginView {
    - scene: Scene
    - primaryStage: Stage
    - controller: LoginController
    --
    + initializeComponents(): void
    + createLayout(): void
    + setupEventHandlers(): void
    + getScene(): Scene
  }
  
  class MainView {
    - scene: Scene
    - primaryStage: Stage
    - controller: MainController
    - userRole: String
    --
    + initializeComponents(): void
    + createLayout(): void
    + setupEventHandlers(): void
    + getScene(): Scene
  }
  
  class BooksView {
    - scene: Scene
    - primaryStage: Stage
    - userRole: String
    - bookDAO: BookDAO
    --
    + initializeComponents(): void
    + createLayout(): void
    + loadBooks(): void
    + getScene(): Scene
  }
  
  class UsersView {
    - scene: Scene
    - primaryStage: Stage
    - userRole: String
    - userDAO: UserDAO
    --
    + initializeComponents(): void
    + createLayout(): void
    + loadUsers(): void
    + getScene(): Scene
  }
  
  class PartnersView {
    - scene: Scene
    - primaryStage: Stage
    - userRole: String
    - partnerDAO: PartnerDAO
    --
    + initializeComponents(): void
    + createLayout(): void
    + loadPartners(): void
    + getScene(): Scene
  }
  
  class LoansView {
    - scene: Scene
    - primaryStage: Stage
    - userRole: String
    - loanDAO: LoanDAO
    --
    + initializeComponents(): void
    + createLayout(): void
    + loadLoans(): void
    + getScene(): Scene
  }
  
  class ReportsView {
    - scene: Scene
    - primaryStage: Stage
    - userRole: String
    --
    + initializeComponents(): void
    + createLayout(): void
    + getScene(): Scene
  }
}

' Report Classes
package "Report Generation" #Wheat {
  class CSVReportGenerator {
    --
    + {static} exportBooksToCSV(books: List<Book>): void
    + {static} exportPartnersToCSV(partners: List<Partner>): void
    + {static} exportLoansToCSV(loans: List<Loan>): void
    + {static} generateTemplate(): void
  }
  
  class CSVBookImporter {
    --
    + {static} importBooksFromCSV(filePath: String): List<Book>
    + {static} validateCSVFormat(filePath: String): boolean
  }
}

' Application Entry Point
package "Application" #LightSalmon {
  class NovaBook {
    --
    + main(args: String[]): void
    + start(primaryStage: Stage): void
  }
}

' Relationships
' Entity Relationships
Users ||--o{ Rol : "has roles"
Loan }o--|| Book : "borrows"
Loan }o--|| Partner : "borrowed by"

' DAO Dependencies
BookDAO ..> Book : "manages"
PartnerDAO ..> Partner : "manages"
UserDAO ..> Users : "manages"
LoanDAO ..> Loan : "manages"
RolDAO ..> Rol : "manages"

' Connection Dependencies
BookDAO --> ConnectionDB : "uses"
PartnerDAO --> ConnectionDB : "uses"
UserDAO --> ConnectionDB : "uses"
LoanDAO --> ConnectionDB : "uses"
RolDAO --> ConnectionDB : "uses"

' Controller Dependencies
MainController ..> BooksView : "creates"
MainController ..> PartnersView : "creates"
MainController ..> LoansView : "creates"
MainController ..> UsersView : "creates"
MainController ..> ReportsView : "creates"
LoginController ..> MainView : "creates"

' View Dependencies
LoginView --> LoginController : "uses"
MainView --> MainController : "uses"
BooksView --> BookDAO : "uses"
PartnersView --> PartnerDAO : "uses"
LoansView --> LoanDAO : "uses"
UsersView --> UserDAO : "uses"

' Report Dependencies
ReportsView --> CSVReportGenerator : "uses"
ReportsView --> CSVBookImporter : "uses"

' Application Dependencies
NovaBook --> LoginView : "starts with"

' Notes
note right of UserDAO
  Only accessible by 
  Administrator role.
  Restricted access control.
end note

note right of UsersView
  Protected view that requires
  Administrator privileges.
  Shows "Access Denied" for
  Librarian role.
end note

note bottom of ConnectionDB
  Singleton pattern for
  database connection
  management.
end note

@enduml